#include <iostream>
#include "AlsaBufferConverter.h"
#include <memory>

int main()
{
    uint8_t buf[] = { 0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 ,
                      0x7F, 0xFF, 0xFF, 0x40, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x00 };

    AlsaBufferConverter test;

    std::unique_ptr<int32_t> egSamples = test.getSamples(buf);
    for (int index = 0; index < test.getSamplesPerBuffer(); index+=4)
    {
        std::cout << egSamples.get()[index] << " " << egSamples.get()[index + 1] << " " << egSamples.get()[index + 2] << " " << egSamples.get()[index + 3] << std::endl;
    }

    std::unique_ptr<uint8_t> egBuffer(test.getBuffer(egSamples.get()));
    for (int index = 0; index < (test.getBytesPerSample() * test.getSamplesPerBuffer()); index += 12)
    {
        printf(" %02X%02X%02X  %02X%02X%02X   %02X%02X%02X   %02X%02X%02X  \n", egBuffer.get()[index + 0], egBuffer.get()[index + 1], egBuffer.get()[index + 2], egBuffer.get()[index + 3], egBuffer.get()[index + 4], egBuffer.get()[index + 5],
                                                                         egBuffer.get()[index + 6], egBuffer.get()[index + 7], egBuffer.get()[index + 8], egBuffer.get()[index + 9], egBuffer.get()[index + 10], egBuffer.get()[index + 11]);
    }
}